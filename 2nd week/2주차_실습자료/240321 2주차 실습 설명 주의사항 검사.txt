2주차 실습 설명, 주의사항, 검사

<<설명>>
1. 실습 첫 번째 문제는 MakeFile의 활용능력, 구체적으로는 임의의 C 파일 4개를 묶어 컴파일 하는 과정을 보기 위한 실습입니다.
main 외 3 파일에는 임의의 프로그램을 직접!! 작성해주세요. hello world류 프로그램이 무난합니다.
main.c에서는 나머지 3개의 파일에 있는 함수를 불러와주세요. 나머지 3 파일의 코드를 불러올 수 있는지 확인하기 위합입니다.
헤더가 필요할 가능성이 크지만 기본적으로 나머지 3 파일의 코드를 불러올 수 있다는 점이 중요하니 어떻게 하셔도 됩니다.


2. 실습 두 번쨰 문제는 gdb의 디버깅 능력을 숙지하고, 디버깅으로 버그를 지적할 수 있는 지 보기 위한 실습입니다.
테스트용 프로그램은 임의의 수식 계산 결과를 확인하기 위한 프로그램입니다. f(x) = x + x/2에 x = {1, 2, 3, 4, 5}가 들어간다면 어떤 수가 나올까요?
프로그램의 의도를 잘 모르겠다면 코드를 읽기 전에 위 수식에 어떤 결과가 나올 지 먼저 생각해보고, 디버깅 하지 않고 출력을 해보세요.
<gdb 실행 방법>
1. gcc -g -o file main.c
2. gdb file
3. (gdb) l
4. (gdb) b 2
5. (gdb) run
6. (gdb) display num
7. (gdb) n		

3. 실습 세 번쨰 문제는 (결과보고서에 작성할) 좀 있어보이는 프로그램을 작성하기 위한 실습입니다. 
하지만 코드를 모두 작성하실 필요는 없고, 첨부한 압축파일을 활용하시면 됩니다. 
R1~R9 조건에 만족하면 어떻게 짜셔도 되지만 첨부한 압축파일의 String_Manipulation.c 만 고쳐주시면 됩니다. 
주석대로 직역하면 아주 쉽게 풀릴겁니다.
<R1~R9 조건 설명>
프로그램: 여러 문장을 합치는 프로그램. 줄바꿈의 조건은 글자 수.
R1: 마지막 줄의 공백은 X. (줄 바꿈은 허용 - R8)
R2: 줄을 합칠 떄, 줄 사이 공백은 하나로 퉁쳐라
R3: 줄을 합칠 떄가 아니면 단어 사이 공백은 냅둬라
R4: 줄을 나눌 때는 단어 단위로 나누고, 공백은 0개로 퉁쳐라 (R2 + R3) 
R5: 줄 합치는 본 프로그램에서의 합치지 않는 조건.
R6: 줄을 나눌 떄 단어를 나누지는 않는다.  
R7: 빈 줄은 냅둔다
R8: 마지막 줄의 줄바꿈은 냅둔다. (공백은 없앤다 - R1)
R9: 빈 파일에 대한 동작


<<주의 사항>>
전체.
	1. make 했을 때 나오는 오류는 강의자료 p.16에 모두 나와있는데 혹시
    		1. p.11처럼 분홍색으로 안 뜨거나 missing separator라는 오류가 발생하는 경우
        		1. `gcc -c ~` 명령어가 있는 줄은 tab을 해준 후 명령어를 작성해야 한다.
		2. (did you mean TAB ~)에러가 발생하는 경우 `cd ~` 명령어를 통해 home 디렉토리로 이동해 `vi .vimrc`로 vimrc 파일을 켜서(또는 `vi ~/.vimrc`) shift ~, expand tab 등등 tab 과 관련된 모든 줄을 삭제하고 `set nocindent` 를 추가해준다. 그런 다음 다시 Makefile로 돌아가 gcc 명령어 앞에 tab을 친다.
	3. 각각 실습이 서로 다른 makefile을 가지므로 mkdir 명령어를 이용해 실습 123에 대한 폴더를 각각 만들어준다.
실습 1번. 
	1.1. MakeFile 만드는 실습입니다. 첨부파일의 MakeFile과 헷갈리지 마세요. 그건 3번 문제입니다.
	1.2 자주 나오는 실수 중에 main을 파일별로 각각 한개씩 선언하는 경우가 있습니다. 나머지 3 파일은 main에서 쓰이는 함수를 정의하는 역할입니다.
	1.3. 강의 교안을 보시면 변수를 선언하지 않는 MakeFile까지는 무난하게 될텐데, 빈칸 갯수 맞춘다고 띄어쓰기 (' ')를 하는 것도 자주 나오는 오류입니다. TAB키 한번 눌러주시면 됩니다.
실습 2번.
	2.1. main의 반환형도 지정 안 한것도 오류의 원인입니다만, 의도한 것은 아니고 단순한 오타입니다. 고쳐주세요.
	2.2. 제출 할 때는 2번 폴더에는 캡쳐한 디버깅 로그와 설명한대로 프로그램을 고쳐 넣어주세요.
실습 3번.
	3.1. FileZila로 첨부한 파일들을 모두 옮겨 String_Manipulation만 고쳐 (그 중 위엣 함수) 활용하는 실습입니다. 처음부터 직접 작성하지 마세요.
	3.2. 첨부한 파일을 옮길 떄, 반드시!!! 대문자로 된 Output.c, String_Manipulation.c를 소문자로 고쳐주세요. MakeFile 내부를 보시면 파일들이 소문자로 되어있습니다.

<<검사>>
1.  
	1.1. 변수, phony를 사용한 MakeFile을 cat로 보여주세요.
	1.2. make로 컴파일 되는 과정을 보여주시고 나온 실행파일의 동작을 보여주세요.  (make clean 등은 미리 해주세요)
	1.3. 혹시 모르니 cat으로 main과 dog/cow(중 무작위)로 확인할겁니다. 
2. 
	2.1. 안내한 디버깅 명령어에 따른 실행 과정 기록 보여주시고 안내한 디버깅 명령어의 동작을 설명하세요. (기록에서 n은 최소 8번 해주세요)
	2.2. 오류 (안내한 프로그래밍 의도와 맞지 않는 동작)를 설명하고 원인을 정확하게 설명하세요. (이거... 여기... 이렇게... 말고 구체적으로 설명해주세요)
	2.3. 어떻게 고치면 될 수 있을지 설명해주세요.
3.
	3.1. make - 실행파일 실행해주세요. 명령어는 ./main testfile.txt 입니다. (예시 3개를 테스트 할 생각은 없습니다.)
	3.2. 기본적으로 코드 세부적으로 검사하진 않고 조교가 알고있는 출력과 동일할지만 확인할겁니다. 
END.
	0.1. 끝나면 이름 말해주세요. 가셔도 좋습니다.
	0.2. 제출은 실습한 결과물을 FileZila로 가져와서 압축해서 제출해주세요. 이 떄, 2번쨰 실습은 안내한대로 디버깅 과정 캡쳐본과 수정된 C 파일이 들어가야 합니다.